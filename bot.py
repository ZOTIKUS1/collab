import json
import os
from telegram import Update, InputFile, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7601732852:AAGb4aUH7YGVcJaqy3ZgDNHCyY2Hb-t76uU"
ADMIN_ID = 985345893  # –í–∞—à ID –≤ Telegram
WELCOME_IMAGE_PATH = "welcome.png"  # –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
CONNECTIONS_FILE = os.path.join(DATA_DIR, "connections.json")
REPORTS_FILE = os.path.join(DATA_DIR, "reports.json")

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)


def load_data(file):
    try:
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_data(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ["üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤", "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫"],
        ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]
    ], resize_keyboard=True)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        if os.path.exists(WELCOME_IMAGE_PATH):
            with open(WELCOME_IMAGE_PATH, 'rb') as photo:
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=InputFile(photo),
                    caption="<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CollabLeaks! üåü</b>\n\n"
                            "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –¥–µ–ª–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n\n"
                            "<b>üìå –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
                            "‚Ä¢ –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º –∏ –≥–æ—Ä–æ–¥–∞–º\n"
                            "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n"
                            "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è\n\n"
                            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /register",
                    parse_mode="HTML"
                )
        else:
            await update.message.reply_text(
                "<b>üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Professional Connect! üåü</b>\n\n"
                "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –∏ –¥–µ–ª–æ–≤—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.\n\n"
                "<b>üìå –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
                "‚Ä¢ –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ –æ—Ç—Ä–∞—Å–ª—è–º –∏ –≥–æ—Ä–æ–¥–∞–º\n"
                "‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ–±–º–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–± –∏ –º–æ–¥–µ—Ä–∞—Ü–∏—è\n\n"
                "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ /register",
                parse_mode="HTML"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."
        )


async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_data(USERS_FILE)

    if user_id in users:
        await update.message.reply_text(
            "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
            reply_markup=main_menu_keyboard()
        )
        return

    users[user_id] = {
        "name": update.message.from_user.full_name,
        "username": update.message.from_user.username,
        "city": "",
        "industry": "",
        "skills": "",
        "bio": "",
        "photo": None,
        "reports": 0,
        "banned": False
    }
    save_data(USERS_FILE, users)

    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
        "–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
    )
    context.user_data["step"] = "city"


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    text = update.message.text
    users = load_data(USERS_FILE)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    if text == "üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤":
        await show_next_partner(user_id, context, local=True)
        return
    elif text == "üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫":
        await show_next_partner(user_id, context, local=False)
        return
    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await show_profile(update, context)
        return
    elif text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
        await edit_profile_options(update, context)
        return
    elif text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=main_menu_keyboard()
        )
        if "step" in context.user_data:
            del context.user_data["step"]
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if user_id not in users or "step" not in context.user_data:
        return

    step = context.user_data["step"]

    if step == "city":
        users[user_id]["city"] = text
        context.user_data["step"] = "industry"
        save_data(USERS_FILE, users)
        await update.message.reply_text(
            "–í –∫–∞–∫–æ–π –æ—Ç—Ä–∞—Å–ª–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ? (IT, –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥, –§–∏–Ω–∞–Ω—Å—ã –∏ —Ç.–¥.)",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )

    elif step == "industry":
        users[user_id]["industry"] = text
        context.user_data["step"] = "skills"
        save_data(USERS_FILE, users)
        await update.message.reply_text(
            "–ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –≤–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )

    elif step == "skills":
        users[user_id]["skills"] = text
        context.user_data["step"] = "bio"
        save_data(USERS_FILE, users)
        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ–∑—é–º–µ (3-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π):",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )

    elif step == "bio":
        users[user_id]["bio"] = text
        context.user_data["step"] = "photo"
        save_data(USERS_FILE, users)
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
            reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "–û—Ç–º–µ–Ω–∏—Ç—å"]], resize_keyboard=True)
        )

    elif step == "photo":
        if text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            users[user_id]["photo"] = None
            save_data(USERS_FILE, users)
            del context.user_data["step"]
            await update.message.reply_text(
                "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                reply_markup=main_menu_keyboard()
            )


async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_data(USERS_FILE)

    if user_id not in users or "step" not in context.user_data or context.user_data["step"] != "photo":
        return

    photo = update.message.photo[-1].file_id
    users[user_id]["photo"] = photo
    save_data(USERS_FILE, users)
    del context.user_data["step"]
    await update.message.reply_text(
        "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
        reply_markup=main_menu_keyboard()
    )


async def show_next_partner(user_id: str, context: ContextTypes.DEFAULT_TYPE, local: bool = True):
    users = load_data(USERS_FILE)
    connections = load_data(CONNECTIONS_FILE)
    reports = load_data(REPORTS_FILE)

    current_user = users.get(user_id, {})
    current_city = current_user.get("city", "")

    available_users = [
        uid for uid, data in users.items()
        if (uid != user_id and
            not data.get("banned", False) and
            uid not in connections.get(user_id, []) and
            data.get("reports", 0) < 3 and
            (not local or data.get("city") == current_city))
    ]

    if not available_users:
        mode = "–≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ" if local else "–≥–ª–æ–±–∞–ª—å–Ω–æ–º –ø–æ–∏—Å–∫–µ"
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üö´ –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ {mode}.",
            reply_markup=main_menu_keyboard()
        )
        return

    target_id = available_users[0]
    target = users[target_id]

    keyboard = [
        [
            InlineKeyboardButton("üëç –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω", callback_data=f"connect_{target_id}"),
            InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data=f"next_{int(local)}")
        ],
        [InlineKeyboardButton("‚ùå –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{target_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    city_info = f"\nüèô –ì–æ—Ä–æ–¥: {target.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}" if local else ""

    caption = (
        f"üë§ <b>{target['name']}</b>{city_info}\n"
        f"üè¢ –û—Ç—Ä–∞—Å–ª—å: {target['industry']}\n"
        f"üõ† –ù–∞–≤—ã–∫–∏: {target['skills']}\n"
        f"üìù –û —Å–µ–±–µ:\n{target['bio']}"
    )

    if target["photo"]:
        await context.bot.send_photo(
            chat_id=user_id,
            photo=target["photo"],
            caption=caption,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        await context.bot.send_message(
            chat_id=user_id,
            text=caption,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    users = load_data(USERS_FILE)

    if user_id not in users:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /register",
            reply_markup=main_menu_keyboard()
        )
        return

    user = users[user_id]

    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"<b>–ò–º—è:</b> {user['name']}\n"
        f"<b>–ì–æ—Ä–æ–¥:</b> {user.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"<b>–û—Ç—Ä–∞—Å–ª—å:</b> {user['industry']}\n"
        f"<b>–ù–∞–≤—ã–∫–∏:</b> {user['skills']}\n\n"
        f"<b>–û —Å–µ–±–µ:</b>\n{user['bio']}"
    )

    if user["photo"]:
        await update.message.reply_photo(
            user["photo"],
            caption=text,
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )


async def edit_profile_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ì–æ—Ä–æ–¥", callback_data="edit_city"),
         InlineKeyboardButton("–û—Ç—Ä–∞—Å–ª—å", callback_data="edit_industry")],
        [InlineKeyboardButton("–ù–∞–≤—ã–∫–∏", callback_data="edit_skills"),
         InlineKeyboardButton("–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_bio")],
        [InlineKeyboardButton("–§–æ—Ç–æ", callback_data="edit_photo")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=reply_markup,
        parse_mode="HTML"
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = str(query.from_user.id)
    users = load_data(USERS_FILE)
    connections = load_data(CONNECTIONS_FILE)
    reports = load_data(REPORTS_FILE)

    if data.startswith("next_"):
        is_local = bool(int(data.split("_")[1]))
        await query.delete_message()
        await show_next_partner(user_id, context, local=is_local)

    elif data == "back_to_menu":
        await query.delete_message()
        await context.bot.send_message(
            chat_id=user_id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )

    elif data.startswith("connect_"):
        target_id = data.split("_")[1]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if user_id not in connections:
            connections[user_id] = []
        connections[user_id].append(target_id)
        save_data(CONNECTIONS_FILE, connections)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ü–µ–ª—å
        target = users[target_id]
        await context.bot.send_message(
            chat_id=target_id,
            text=f"üíå <b>–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é!</b>\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {users[user_id]['name']}\n"
                 f"–ì–æ—Ä–æ–¥: {users[user_id].get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                 f"–û—Ç—Ä–∞—Å–ª—å: {users[user_id]['industry']}\n\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            parse_mode="HTML"
        )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞
        if target_id in connections and user_id in connections[target_id]:
            user = users[user_id]

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
            contact_msg = f"@{target['username']}" if target.get(
                'username') else f"<a href='tg://user?id={target_id}'>–Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>"
            await context.bot.send_message(
                chat_id=user_id,
                text=f"ü§ù <b>–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!</b>\n\n"
                     f"{target['name']} —Ç–æ–∂–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω(–∞) –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ.\n\n"
                     f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_msg}",
                parse_mode="HTML"
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–∏
            contact_msg = f"@{user['username']}" if user.get(
                'username') else f"<a href='tg://user?id={user_id}'>–Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</a>"
            await context.bot.send_message(
                chat_id=target_id,
                text=f"ü§ù <b>–í–∑–∞–∏–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å!</b>\n\n"
                     f"{user['name']} —Ç–æ–∂–µ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω(–∞) –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ.\n\n"
                     f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_msg}",
                parse_mode="HTML"
            )

        await query.delete_message()
        await context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –í–∞—à –∏–Ω—Ç–µ—Ä–µ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=main_menu_keyboard()
        )

    elif data.startswith("report_"):
        target_id = data.split("_")[1]

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∂–∞–ª–æ–±—É
        if target_id not in reports:
            reports[target_id] = []

        if user_id not in reports[target_id]:
            reports[target_id].append(user_id)
            users[target_id]["reports"] = len(reports[target_id])

            # –ê–≤—Ç–æ–±–∞–Ω –ø—Ä–∏ 3+ –∂–∞–ª–æ–±–∞—Ö
            if users[target_id]["reports"] >= 3:
                users[target_id]["banned"] = True
                await context.bot.send_message(
                    chat_id=target_id,
                    text="üö´ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ –º–Ω–æ–≥–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∂–∞–ª–æ–±."
                )

            save_data(REPORTS_FILE, reports)
            save_data(USERS_FILE, users)

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=f"‚ö†Ô∏è <b>–ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞</b>\n\n"
                     f"–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {users[target_id]['name']}\n"
                     f"ID: {target_id}\n"
                     f"–ì–æ—Ä–æ–¥: {users[target_id].get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                     f"–í—Å–µ–≥–æ –∂–∞–ª–æ–±: {users[target_id]['reports']}\n\n"
                     f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: /inspect_{target_id}",
                parse_mode="HTML"
            )

            await query.answer("‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        else:
            await query.answer("–í—ã —É–∂–µ –∂–∞–ª–æ–≤–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

        await query.delete_message()
        await context.bot.send_message(
            chat_id=user_id,
            text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –±–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!",
            reply_markup=main_menu_keyboard()
        )

    elif data.startswith("edit_"):
        field = data.split("_")[1]
        context.user_data["editing"] = field
        await query.edit_message_text(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {field}:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_menu")]
            ])
        )


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def show_reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return

    reports = load_data(REPORTS_FILE)
    users = load_data(USERS_FILE)

    text = "üìã <b>–°–ø–∏—Å–æ–∫ –∂–∞–ª–æ–±</b>\n\n"
    for reported_id, reporter_ids in reports.items():
        user = users.get(reported_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "city": ""})
        text += f"üë§ <b>{user['name']}</b> (ID: {reported_id})\n"
        text += f"üèô –ì–æ—Ä–æ–¥: {user.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"‚ö†Ô∏è –ñ–∞–ª–æ–±: {len(reporter_ids)}\n"
        text += f"üîç /inspect_{reported_id}\n\n"

    await update.message.reply_text(
        text or "‚ÑπÔ∏è –ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç",
        parse_mode="HTML"
    )


async def inspect_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return

    try:
        target_id = context.args[0]
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /inspect USER_ID")
        return

    users = load_data(USERS_FILE)
    reports = load_data(REPORTS_FILE)

    user = users.get(target_id, {})

    text = "üîç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
    text += f"ID: {target_id}\n"
    text += f"–ò–º—è: {user.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
    text += f"–ì–æ—Ä–æ–¥: {user.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"–û—Ç—Ä–∞—Å–ª—å: {user.get('industry', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"–°—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.get('banned') else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n"
    text += f"–ñ–∞–ª–æ–±: {len(reports.get(target_id, []))}\n\n"

    if target_id in reports:
        text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∂–∞–ª–æ–±—ã –æ—Ç:\n"
        for reporter_id in reports[target_id][-3:]:
            reporter = users.get(reporter_id, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"})
            text += f"- {reporter['name']} (ID: {reporter_id})\n"

    await update.message.reply_text(
        text,
        parse_mode="HTML"
    )


def main():
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(CommandHandler("reports", show_reports))
    app.add_handler(CommandHandler("inspect", inspect_user))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()


if __name__ == "__main__":
    main()